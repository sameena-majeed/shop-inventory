import*as e from"react";import{KeyFilter as t}from"primereact/keyfilter";import{Tooltip as n}from"primereact/tooltip";import{ObjectUtils as r,classNames as l,DomHandler as o}from"primereact/utils";function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}var i=e.memo(e.forwardRef((function(p,s){var u=e.useRef(s),f=e.useMemo((function(){return r.isNotEmpty(p.value)||r.isNotEmpty(p.defaultValue)||u.current&&r.isNotEmpty(u.current.value)}),[p.value,p.defaultValue]);e.useEffect((function(){r.combinedRefs(u,s)}),[u,s]);var m=r.isNotEmpty(p.tooltip),c=r.findDiffKeys(p,i.defaultProps),y=l("p-inputtext p-component",{"p-disabled":p.disabled,"p-filled":f},p.className);return e.createElement(e.Fragment,null,e.createElement("input",a({ref:u},c,{className:y,onInput:function(e){var n=!0;if(p.keyfilter&&p.validateOnly&&(n=t.validate(e,p.keyfilter)),p.onInput&&p.onInput(e,n),!p.onChange){var l=e.target;r.isNotEmpty(l.value)?o.addClass(l,"p-filled"):o.removeClass(l,"p-filled")}},onKeyPress:function(e){p.onKeyPress&&p.onKeyPress(e),p.keyfilter&&t.onKeyPress(e,p.keyfilter,p.validateOnly)}})),m&&e.createElement(n,a({target:u,content:p.tooltip},p.tooltipOptions)))})));i.displayName="InputText",i.defaultProps={__TYPE:"InputText",keyfilter:null,validateOnly:!1,tooltip:null,tooltipOptions:null,onInput:null,onKeyPress:null};export{i as InputText};
